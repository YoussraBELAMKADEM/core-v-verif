!Feature
next_elt_id: 3
name: Flush
id: 5
display_order: 5
subfeatures: !!omap
- 000_Flush: !Subfeature
    name: 000_Flush
    tag: VP_FENCEI_F005_S000
    next_elt_id: 1
    display_order: 0
    items: !!omap
    - '000': !VerifItem
        name: '000'
        tag: VP_FENCEI_F005_S000_I000
        description: The FENCE.I instruction was designed to support a wide variety
          of implementations. A simple implementation can flush the local instruction
          cache and the instruction pipeline when the FENCE.I is executed.
        reqt_doc: "The RISC-V Instruction Set Manual\nUnprivileged ISA\nChapter 3"
        ref_mode: page
        ref_page: ''
        ref_section: ''
        ref_viewer: firefox
        verif_goals: "When FENCE.I is executed, then any prefetched instructions shall\
          \ be flushed; meaning that pipeline stages are flushed, prefetcher is flushed,\
          \ write buffer is flushed, and mem_data_req_o (wt_dcache) is eventually\
          \ supressed.\nCheck that a FENCE.I will cause flushing of the pipeline,\
          \ prefetcher, write buffer, and mem_data_req_o."
        pfc: 4
        test_type: 4
        cov_method: 2
        cores: 56
        coverage_loc: ''
        comments: ''
- 001_OptimisedFlushing: !Subfeature
    name: 001_OptimisedFlushing
    tag: VP_FENCEI_F005_S001
    next_elt_id: 1
    display_order: 1
    items: !!omap
    - '000': !VerifItem
        name: '000'
        tag: VP_FENCEI_F005_S001_I000
        description: If instruction and data caches are kept coherent in this way,
          or if the memory system consists of only uncached RAMs, then just the fetch
          pipeline needs to be flushed at a FENCE.I.
        reqt_doc: "The RISC-V Instruction Set Manual\nUnprivileged ISA\nChapter 3"
        ref_mode: page
        ref_page: ''
        ref_section: ''
        ref_viewer: firefox
        verif_goals: "Conditioned flushing; check that the flushing is executed when\
          \ necessary! When FENCE.I is executed but the subsequent instruction is\
          \ data_side independent, the flushing does not have to operate.\nDo a FENCE.I\
          \ followed by an instruction independent to the one preceding the FENCE.I,\
          \ and check if the flushing is ignored"
        pfc: 1
        test_type: -1
        cov_method: 2
        cores: 56
        coverage_loc: ''
        comments: ''
- 002_FlushFlow: !Subfeature
    name: 002_FlushFlow
    tag: VP_FENCEI_F005_S002
    next_elt_id: 1
    display_order: 2
    items: !!omap
    - '000': !VerifItem
        name: '000'
        tag: VP_FENCEI_F005_S002_I000
        description: "[Not in specification] When a FENCE.I invoke the fluching request,\
          \ we should make sure that it's well acknowledged."
        reqt_doc: CVA6 User Manual
        ref_mode: page
        ref_page: ''
        ref_section: ''
        ref_viewer: firefox
        verif_goals: Check that when executing a FENCE.I instruction there will be
          a fence_i_commit_controller request by the controller responding to the
          commit stage.
        pfc: 4
        test_type: -1
        cov_method: 10
        cores: 56
        coverage_loc: ''
        comments: ''
vptool_gitrev: '$Id: b0efb3ae3f9057b71a577d43c2b77f1cfb2ef82f $'
io_fmt_gitrev: '$Id: 7ee5d68801f5498a957bcbe23fcad87817a364c5 $'
config_gitrev: '$Id: 0422e19126dae20ffc4d5a84e4ce3de0b6eb4eb5 $'
ymlcfg_gitrev: '$Id: 286c689bd48b7a58f9a37754267895cffef1270c $'
